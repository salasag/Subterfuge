{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __decorate, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { AbstractPureComponent2, Classes, DISPLAYNAME_PREFIX, Intent, Keys, Position, removeNonHTMLProps, Utils } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { ButtonGroup } from \"../button/buttonGroup\";\nimport { AnchorButton } from \"../button/buttons\";\nimport { ControlGroup } from \"./controlGroup\";\nimport { InputGroup } from \"./inputGroup\";\nimport { clampValue, getValueOrEmptyValue, isValidNumericKeyboardEvent, isValueNumeric, sanitizeNumericInput, toMaxPrecision } from \"./numericInputUtils\";\nvar IncrementDirection;\n\n(function (IncrementDirection) {\n  IncrementDirection[IncrementDirection[\"DOWN\"] = -1] = \"DOWN\";\n  IncrementDirection[IncrementDirection[\"UP\"] = 1] = \"UP\";\n})(IncrementDirection || (IncrementDirection = {}));\n\nvar NON_HTML_PROPS = [\"allowNumericCharactersOnly\", \"buttonPosition\", \"clampValueOnBlur\", \"className\", \"defaultValue\", \"majorStepSize\", \"minorStepSize\", \"onButtonClick\", \"onValueChange\", \"selectAllOnFocus\", \"selectAllOnIncrement\", \"stepSize\"];\n\nvar NumericInput =\n/** @class */\nfunction (_super) {\n  __extends(NumericInput, _super);\n\n  function NumericInput() {\n    var _a;\n\n    var _this = _super.apply(this, arguments) || this;\n\n    _this.state = {\n      currentImeInputInvalid: false,\n      shouldSelectAfterUpdate: false,\n      stepMaxPrecision: NumericInput_1.getStepMaxPrecision(_this.props),\n      value: getValueOrEmptyValue((_a = _this.props.value) !== null && _a !== void 0 ? _a : _this.props.defaultValue)\n    }; // updating these flags need not trigger re-renders, so don't include them in this.state.\n\n    _this.didPasteEventJustOccur = false;\n    _this.delta = 0;\n    _this.inputElement = null;\n    _this.intervalId = null;\n    _this.incrementButtonHandlers = _this.getButtonEventHandlers(IncrementDirection.UP);\n    _this.decrementButtonHandlers = _this.getButtonEventHandlers(IncrementDirection.DOWN);\n\n    _this.inputRef = function (input) {\n      _this.inputElement = input;\n      Utils.safeInvoke(_this.props.inputRef, input);\n    };\n\n    _this.handleButtonClick = function (e, direction) {\n      var _a, _b;\n\n      var delta = _this.updateDelta(direction, e);\n\n      var nextValue = _this.incrementValue(delta);\n\n      (_b = (_a = _this.props).onButtonClick) === null || _b === void 0 ? void 0 : _b.call(_a, +nextValue, nextValue);\n    };\n\n    _this.stopContinuousChange = function () {\n      _this.delta = 0;\n\n      _this.clearTimeouts();\n\n      clearInterval(_this.intervalId);\n      document.removeEventListener(\"mouseup\", _this.stopContinuousChange);\n    };\n\n    _this.handleContinuousChange = function () {\n      var _a, _b;\n\n      var nextValue = _this.incrementValue(_this.delta);\n\n      (_b = (_a = _this.props).onButtonClick) === null || _b === void 0 ? void 0 : _b.call(_a, +nextValue, nextValue);\n    }; // Callbacks - Input\n    // =================\n\n\n    _this.handleInputFocus = function (e) {\n      // update this state flag to trigger update for input selection (see componentDidUpdate)\n      _this.setState({\n        shouldSelectAfterUpdate: _this.props.selectAllOnFocus\n      });\n\n      Utils.safeInvoke(_this.props.onFocus, e);\n    };\n\n    _this.handleInputBlur = function (e) {\n      // always disable this flag on blur so it's ready for next time.\n      _this.setState({\n        shouldSelectAfterUpdate: false\n      });\n\n      if (_this.props.clampValueOnBlur) {\n        var value = e.target.value;\n\n        _this.handleNextValue(_this.roundAndClampValue(value));\n      }\n\n      Utils.safeInvoke(_this.props.onBlur, e);\n    };\n\n    _this.handleInputKeyDown = function (e) {\n      if (_this.props.disabled || _this.props.readOnly) {\n        return;\n      }\n\n      var keyCode = e.keyCode;\n      var direction;\n\n      if (keyCode === Keys.ARROW_UP) {\n        direction = IncrementDirection.UP;\n      } else if (keyCode === Keys.ARROW_DOWN) {\n        direction = IncrementDirection.DOWN;\n      }\n\n      if (direction != null) {\n        // when the input field has focus, some key combinations will modify\n        // the field's selection range. we'll actually want to select all\n        // text in the field after we modify the value on the following\n        // lines. preventing the default selection behavior lets us do that\n        // without interference.\n        e.preventDefault();\n\n        var delta = _this.updateDelta(direction, e);\n\n        _this.incrementValue(delta);\n      }\n\n      Utils.safeInvoke(_this.props.onKeyDown, e);\n    };\n\n    _this.handleCompositionEnd = function (e) {\n      if (_this.props.allowNumericCharactersOnly) {\n        _this.handleNextValue(sanitizeNumericInput(e.data));\n\n        _this.setState({\n          currentImeInputInvalid: false\n        });\n      }\n    };\n\n    _this.handleCompositionUpdate = function (e) {\n      if (_this.props.allowNumericCharactersOnly) {\n        var data = e.data;\n        var sanitizedValue = sanitizeNumericInput(data);\n\n        if (sanitizedValue.length === 0 && data.length > 0) {\n          _this.setState({\n            currentImeInputInvalid: true\n          });\n        } else {\n          _this.setState({\n            currentImeInputInvalid: false\n          });\n        }\n      }\n    };\n\n    _this.handleInputKeyPress = function (e) {\n      // we prohibit keystrokes in onKeyPress instead of onKeyDown, because\n      // e.key is not trustworthy in onKeyDown in all browsers.\n      if (_this.props.allowNumericCharactersOnly && !isValidNumericKeyboardEvent(e)) {\n        e.preventDefault();\n      }\n\n      Utils.safeInvoke(_this.props.onKeyPress, e);\n    };\n\n    _this.handleInputPaste = function (e) {\n      _this.didPasteEventJustOccur = true;\n      Utils.safeInvoke(_this.props.onPaste, e);\n    };\n\n    _this.handleInputChange = function (e) {\n      var value = e.target.value;\n      var nextValue = value;\n\n      if (_this.props.allowNumericCharactersOnly && _this.didPasteEventJustOccur) {\n        _this.didPasteEventJustOccur = false;\n        nextValue = sanitizeNumericInput(value);\n      }\n\n      _this.handleNextValue(nextValue);\n\n      _this.setState({\n        shouldSelectAfterUpdate: false\n      });\n    };\n\n    return _this;\n  }\n\n  NumericInput_1 = NumericInput;\n\n  NumericInput.getDerivedStateFromProps = function (props, state) {\n    var _a, _b;\n\n    var nextState = {\n      prevMaxProp: props.max,\n      prevMinProp: props.min,\n      prevValueProp: props.value\n    };\n    var didMinChange = props.min !== state.prevMinProp;\n    var didMaxChange = props.max !== state.prevMaxProp;\n    var didBoundsChange = didMinChange || didMaxChange; // in controlled mode, use props.value\n    // in uncontrolled mode, if state.value has not been assigned yet (upon initial mount), use props.defaultValue\n\n    var value = (_b = (_a = props.value) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : state.value;\n    var stepMaxPrecision = NumericInput_1.getStepMaxPrecision(props);\n    var sanitizedValue = value !== NumericInput_1.VALUE_EMPTY ? NumericInput_1.roundAndClampValue(value, stepMaxPrecision, props.min, props.max) : NumericInput_1.VALUE_EMPTY; // if a new min and max were provided that cause the existing value to fall\n    // outside of the new bounds, then clamp the value to the new valid range.\n\n    if (didBoundsChange && sanitizedValue !== state.value) {\n      return __assign(__assign({}, nextState), {\n        stepMaxPrecision: stepMaxPrecision,\n        value: sanitizedValue\n      });\n    }\n\n    return __assign(__assign({}, nextState), {\n      stepMaxPrecision: stepMaxPrecision,\n      value: value\n    });\n  }; // Value Helpers\n  // =============\n\n\n  NumericInput.getStepMaxPrecision = function (props) {\n    if (props.minorStepSize != null) {\n      return Utils.countDecimalPlaces(props.minorStepSize);\n    } else {\n      return Utils.countDecimalPlaces(props.stepSize);\n    }\n  };\n\n  NumericInput.roundAndClampValue = function (value, stepMaxPrecision, min, max, delta) {\n    if (delta === void 0) {\n      delta = 0;\n    }\n\n    if (!isValueNumeric(value)) {\n      return NumericInput_1.VALUE_EMPTY;\n    }\n\n    var nextValue = toMaxPrecision(parseFloat(value) + delta, stepMaxPrecision);\n    return clampValue(nextValue, min, max).toString();\n  };\n\n  NumericInput.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        buttonPosition = _b.buttonPosition,\n        className = _b.className,\n        fill = _b.fill,\n        large = _b.large;\n    var containerClasses = classNames(Classes.NUMERIC_INPUT, (_a = {}, _a[Classes.LARGE] = large, _a), className);\n    var buttons = this.renderButtons();\n    return React.createElement(ControlGroup, {\n      className: containerClasses,\n      fill: fill\n    }, buttonPosition === Position.LEFT && buttons, this.renderInput(), buttonPosition === Position.RIGHT && buttons);\n  };\n\n  NumericInput.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _a, _b;\n\n    _super.prototype.componentDidUpdate.call(this, prevProps, prevState);\n\n    if (this.state.shouldSelectAfterUpdate) {\n      this.inputElement.setSelectionRange(0, this.state.value.length);\n    }\n\n    var didMinChange = this.props.min !== prevProps.min;\n    var didMaxChange = this.props.max !== prevProps.max;\n    var didBoundsChange = didMinChange || didMaxChange;\n\n    if (didBoundsChange && this.state.value !== prevState.value) {\n      // we clamped the value due to a bounds change, so we should fire the change callback\n      (_b = (_a = this.props).onValueChange) === null || _b === void 0 ? void 0 : _b.call(_a, +this.state.value, this.state.value, this.inputElement);\n    }\n  };\n\n  NumericInput.prototype.validateProps = function (nextProps) {\n    var majorStepSize = nextProps.majorStepSize,\n        max = nextProps.max,\n        min = nextProps.min,\n        minorStepSize = nextProps.minorStepSize,\n        stepSize = nextProps.stepSize,\n        value = nextProps.value;\n\n    if (min != null && max != null && min > max) {\n      throw new Error(Errors.NUMERIC_INPUT_MIN_MAX);\n    }\n\n    if (stepSize == null) {\n      throw new Error(Errors.NUMERIC_INPUT_STEP_SIZE_NULL);\n    }\n\n    if (stepSize <= 0) {\n      throw new Error(Errors.NUMERIC_INPUT_STEP_SIZE_NON_POSITIVE);\n    }\n\n    if (minorStepSize && minorStepSize <= 0) {\n      throw new Error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_NON_POSITIVE);\n    }\n\n    if (majorStepSize && majorStepSize <= 0) {\n      throw new Error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_NON_POSITIVE);\n    }\n\n    if (minorStepSize && minorStepSize > stepSize) {\n      throw new Error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_BOUND);\n    }\n\n    if (majorStepSize && majorStepSize < stepSize) {\n      throw new Error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_BOUND);\n    } // controlled mode\n\n\n    if (value != null) {\n      var stepMaxPrecision = NumericInput_1.getStepMaxPrecision(nextProps);\n      var sanitizedValue = NumericInput_1.roundAndClampValue(value.toString(), stepMaxPrecision, min, max);\n\n      if (sanitizedValue !== value.toString()) {\n        console.warn(Errors.NUMERIC_INPUT_CONTROLLED_VALUE_INVALID);\n      }\n    }\n  }; // Render Helpers\n  // ==============\n\n\n  NumericInput.prototype.renderButtons = function () {\n    var _a = this.props,\n        intent = _a.intent,\n        max = _a.max,\n        min = _a.min;\n    var value = this.state.value;\n    var disabled = this.props.disabled || this.props.readOnly;\n    return React.createElement(ButtonGroup, {\n      className: Classes.FIXED,\n      key: \"button-group\",\n      vertical: true\n    }, React.createElement(AnchorButton, __assign({\n      disabled: disabled || value !== \"\" && +value >= max,\n      icon: \"chevron-up\",\n      intent: intent\n    }, this.incrementButtonHandlers)), React.createElement(AnchorButton, __assign({\n      disabled: disabled || value !== \"\" && +value <= min,\n      icon: \"chevron-down\",\n      intent: intent\n    }, this.decrementButtonHandlers)));\n  };\n\n  NumericInput.prototype.renderInput = function () {\n    var inputGroupHtmlProps = removeNonHTMLProps(this.props, NON_HTML_PROPS, true);\n    return React.createElement(InputGroup, __assign({\n      autoComplete: \"off\"\n    }, inputGroupHtmlProps, {\n      intent: this.state.currentImeInputInvalid ? Intent.DANGER : this.props.intent,\n      inputRef: this.inputRef,\n      large: this.props.large,\n      leftIcon: this.props.leftIcon,\n      onFocus: this.handleInputFocus,\n      onBlur: this.handleInputBlur,\n      onChange: this.handleInputChange,\n      onCompositionEnd: this.handleCompositionEnd,\n      onCompositionUpdate: this.handleCompositionUpdate,\n      onKeyDown: this.handleInputKeyDown,\n      onKeyPress: this.handleInputKeyPress,\n      onPaste: this.handleInputPaste,\n      rightElement: this.props.rightElement,\n      value: this.state.value\n    }));\n  }; // Callbacks - Buttons\n  // ===================\n\n\n  NumericInput.prototype.getButtonEventHandlers = function (direction) {\n    var _this = this;\n\n    return {\n      // keydown is fired repeatedly when held so it's implicitly continuous\n      onKeyDown: function (evt) {\n        if (!_this.props.disabled && Keys.isKeyboardClick(evt.keyCode)) {\n          _this.handleButtonClick(evt, direction);\n        }\n      },\n      onMouseDown: function (evt) {\n        if (!_this.props.disabled) {\n          _this.handleButtonClick(evt, direction);\n\n          _this.startContinuousChange();\n        }\n      }\n    };\n  };\n\n  NumericInput.prototype.startContinuousChange = function () {\n    var _this = this; // The button's onMouseUp event handler doesn't fire if the user\n    // releases outside of the button, so we need to watch all the way\n    // from the top.\n\n\n    document.addEventListener(\"mouseup\", this.stopContinuousChange); // Initial delay is slightly longer to prevent the user from\n    // accidentally triggering the continuous increment/decrement.\n\n    this.setTimeout(function () {\n      _this.intervalId = window.setInterval(_this.handleContinuousChange, NumericInput_1.CONTINUOUS_CHANGE_INTERVAL);\n    }, NumericInput_1.CONTINUOUS_CHANGE_DELAY);\n  }; // Data logic\n  // ==========\n\n\n  NumericInput.prototype.handleNextValue = function (valueAsString) {\n    var _a, _b;\n\n    if (this.props.value == null) {\n      this.setState({\n        value: valueAsString\n      });\n    }\n\n    (_b = (_a = this.props).onValueChange) === null || _b === void 0 ? void 0 : _b.call(_a, +valueAsString, valueAsString, this.inputElement);\n  };\n\n  NumericInput.prototype.incrementValue = function (delta) {\n    // pretend we're incrementing from 0 if currValue is empty\n    var currValue = this.state.value === NumericInput_1.VALUE_EMPTY ? NumericInput_1.VALUE_ZERO : this.state.value;\n    var nextValue = this.roundAndClampValue(currValue, delta);\n\n    if (nextValue !== this.state.value) {\n      this.handleNextValue(nextValue);\n      this.setState({\n        shouldSelectAfterUpdate: this.props.selectAllOnIncrement\n      });\n    } // return value used in continuous change updates\n\n\n    return nextValue;\n  };\n\n  NumericInput.prototype.getIncrementDelta = function (direction, isShiftKeyPressed, isAltKeyPressed) {\n    var _a = this.props,\n        majorStepSize = _a.majorStepSize,\n        minorStepSize = _a.minorStepSize,\n        stepSize = _a.stepSize;\n\n    if (isShiftKeyPressed && majorStepSize != null) {\n      return direction * majorStepSize;\n    } else if (isAltKeyPressed && minorStepSize != null) {\n      return direction * minorStepSize;\n    } else {\n      return direction * stepSize;\n    }\n  };\n\n  NumericInput.prototype.roundAndClampValue = function (value, delta) {\n    if (delta === void 0) {\n      delta = 0;\n    }\n\n    return NumericInput_1.roundAndClampValue(value, this.state.stepMaxPrecision, this.props.min, this.props.max, delta);\n  };\n\n  NumericInput.prototype.updateDelta = function (direction, e) {\n    this.delta = this.getIncrementDelta(direction, e.shiftKey, e.altKey);\n    return this.delta;\n  };\n\n  var NumericInput_1;\n  NumericInput.displayName = DISPLAYNAME_PREFIX + \".NumericInput\";\n  NumericInput.VALUE_EMPTY = \"\";\n  NumericInput.VALUE_ZERO = \"0\";\n  NumericInput.defaultProps = {\n    allowNumericCharactersOnly: true,\n    buttonPosition: Position.RIGHT,\n    clampValueOnBlur: false,\n    defaultValue: NumericInput_1.VALUE_EMPTY,\n    large: false,\n    majorStepSize: 10,\n    minorStepSize: 0.1,\n    selectAllOnFocus: false,\n    selectAllOnIncrement: false,\n    stepSize: 1\n  };\n  NumericInput.CONTINUOUS_CHANGE_DELAY = 300;\n  NumericInput.CONTINUOUS_CHANGE_INTERVAL = 100;\n  NumericInput = NumericInput_1 = __decorate([polyfill], NumericInput);\n  return NumericInput;\n}(AbstractPureComponent2);\n\nexport { NumericInput };","map":{"version":3,"sources":["../../../../src/components/forms/numericInput.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,OAAO,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,QAAT,QAAyB,yBAAzB;AAGA,SACI,sBADJ,EAEI,OAFJ,EAGI,kBAHJ,EAMI,MANJ,EAQI,IARJ,EAUI,QAVJ,EAWI,kBAXJ,EAYI,KAZJ,QAaO,cAbP;AAcA,OAAO,KAAK,MAAZ,MAAwB,qBAAxB;AAEA,SAAS,WAAT,QAA4B,uBAA5B;AACA,SAAS,YAAT,QAA6B,mBAA7B;AACA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,UAAT,QAA2B,cAA3B;AACA,SACI,UADJ,EAEI,oBAFJ,EAGI,2BAHJ,EAII,cAJJ,EAKI,oBALJ,EAMI,cANJ,QAOO,qBAPP;AAqIA,IAAK,kBAAL;;AAAA,CAAA,UAAK,kBAAL,EAAuB;AACnB,EAAA,kBAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,CAAA,GAAA,MAAA;AACA,EAAA,kBAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA;AACH,CAHD,EAAK,kBAAkB,KAAlB,kBAAkB,GAAA,EAAA,CAAvB;;AAKA,IAAM,cAAc,GAAoC,CACpD,4BADoD,EAEpD,gBAFoD,EAGpD,kBAHoD,EAIpD,WAJoD,EAKpD,cALoD,EAMpD,eANoD,EAOpD,eAPoD,EAQpD,eARoD,EASpD,eAToD,EAUpD,kBAVoD,EAWpD,sBAXoD,EAYpD,UAZoD,CAAxD;;AAkBA,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkC,EAAA,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;;AAAlC,WAAA,YAAA,GAAA;;;AAAA,QAAA,KAAA,GAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,KAAA,IAAA;;AAsEW,IAAA,KAAA,CAAA,KAAA,GAA4B;AAC/B,MAAA,sBAAsB,EAAE,KADO;AAE/B,MAAA,uBAAuB,EAAE,KAFM;AAG/B,MAAA,gBAAgB,EAAE,cAAY,CAAC,mBAAb,CAAiC,KAAI,CAAC,KAAtC,CAHa;AAI/B,MAAA,KAAK,EAAE,oBAAoB,CAAA,CAAA,EAAA,GAAC,KAAI,CAAC,KAAL,CAAW,KAAZ,MAAiB,IAAjB,IAAiB,EAAA,KAAA,KAAA,CAAjB,GAAiB,EAAjB,GAAqB,KAAI,CAAC,KAAL,CAAW,YAAhC;AAJI,KAA5B,CAtEX,CA6EI;;AACQ,IAAA,KAAA,CAAA,sBAAA,GAAyB,KAAzB;AACA,IAAA,KAAA,CAAA,KAAA,GAAQ,CAAR;AACA,IAAA,KAAA,CAAA,YAAA,GAAwC,IAAxC;AACA,IAAA,KAAA,CAAA,UAAA,GAA4B,IAA5B;AAEA,IAAA,KAAA,CAAA,uBAAA,GAA0B,KAAI,CAAC,sBAAL,CAA4B,kBAAkB,CAAC,EAA/C,CAA1B;AACA,IAAA,KAAA,CAAA,uBAAA,GAA0B,KAAI,CAAC,sBAAL,CAA4B,kBAAkB,CAAC,IAA/C,CAA1B;;AAkHA,IAAA,KAAA,CAAA,QAAA,GAAW,UAAC,KAAD,EAA+B;AAC9C,MAAA,KAAI,CAAC,YAAL,GAAoB,KAApB;AACA,MAAA,KAAK,CAAC,UAAN,CAAiB,KAAI,CAAC,KAAL,CAAW,QAA5B,EAAsC,KAAtC;AACH,KAHO;;AAyBA,IAAA,KAAA,CAAA,iBAAA,GAAoB,UAAC,CAAD,EAA4C,SAA5C,EAAyE;;;AACjG,UAAM,KAAK,GAAG,KAAI,CAAC,WAAL,CAAiB,SAAjB,EAA4B,CAA5B,CAAd;;AACA,UAAM,SAAS,GAAG,KAAI,CAAC,cAAL,CAAoB,KAApB,CAAlB;;AACA,OAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAI,CAAC,KAAL,EAAW,aAAX,MAAwB,IAAxB,IAAwB,EAAA,KAAA,KAAA,CAAxB,GAAwB,KAAA,CAAxB,GAAwB,EAAA,CAAA,IAAA,CAAA,EAAA,EAAG,CAAC,SAAJ,EAAe,SAAf,CAAxB;AACH,KAJO;;AAmBA,IAAA,KAAA,CAAA,oBAAA,GAAuB,YAAA;AAC3B,MAAA,KAAI,CAAC,KAAL,GAAa,CAAb;;AACA,MAAA,KAAI,CAAC,aAAL;;AACA,MAAA,aAAa,CAAC,KAAI,CAAC,UAAN,CAAb;AACA,MAAA,QAAQ,CAAC,mBAAT,CAA6B,SAA7B,EAAwC,KAAI,CAAC,oBAA7C;AACH,KALO;;AAOA,IAAA,KAAA,CAAA,sBAAA,GAAyB,YAAA;;;AAC7B,UAAM,SAAS,GAAG,KAAI,CAAC,cAAL,CAAoB,KAAI,CAAC,KAAzB,CAAlB;;AACA,OAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAI,CAAC,KAAL,EAAW,aAAX,MAAwB,IAAxB,IAAwB,EAAA,KAAA,KAAA,CAAxB,GAAwB,KAAA,CAAxB,GAAwB,EAAA,CAAA,IAAA,CAAA,EAAA,EAAG,CAAC,SAAJ,EAAe,SAAf,CAAxB;AACH,KAHO,CAzPZ,CA8PI;AACA;;;AAEQ,IAAA,KAAA,CAAA,gBAAA,GAAmB,UAAC,CAAD,EAAoB;AAC3C;AACA,MAAA,KAAI,CAAC,QAAL,CAAc;AAAE,QAAA,uBAAuB,EAAE,KAAI,CAAC,KAAL,CAAW;AAAtC,OAAd;;AACA,MAAA,KAAK,CAAC,UAAN,CAAiB,KAAI,CAAC,KAAL,CAAW,OAA5B,EAAqC,CAArC;AACH,KAJO;;AAMA,IAAA,KAAA,CAAA,eAAA,GAAkB,UAAC,CAAD,EAAsC;AAC5D;AACA,MAAA,KAAI,CAAC,QAAL,CAAc;AAAE,QAAA,uBAAuB,EAAE;AAA3B,OAAd;;AAEA,UAAI,KAAI,CAAC,KAAL,CAAW,gBAAf,EAAiC;AACrB,YAAA,KAAK,GAAK,CAAC,CAAC,MAAF,CAAL,KAAL;;AACR,QAAA,KAAI,CAAC,eAAL,CAAqB,KAAI,CAAC,kBAAL,CAAwB,KAAxB,CAArB;AACH;;AAED,MAAA,KAAK,CAAC,UAAN,CAAiB,KAAI,CAAC,KAAL,CAAW,MAA5B,EAAoC,CAApC;AACH,KAVO;;AAYA,IAAA,KAAA,CAAA,kBAAA,GAAqB,UAAC,CAAD,EAAuB;AAChD,UAAI,KAAI,CAAC,KAAL,CAAW,QAAX,IAAuB,KAAI,CAAC,KAAL,CAAW,QAAtC,EAAgD;AAC5C;AACH;;AAEO,UAAA,OAAO,GAAK,CAAC,CAAN,OAAP;AAER,UAAI,SAAJ;;AAEA,UAAI,OAAO,KAAK,IAAI,CAAC,QAArB,EAA+B;AAC3B,QAAA,SAAS,GAAG,kBAAkB,CAAC,EAA/B;AACH,OAFD,MAEO,IAAI,OAAO,KAAK,IAAI,CAAC,UAArB,EAAiC;AACpC,QAAA,SAAS,GAAG,kBAAkB,CAAC,IAA/B;AACH;;AAED,UAAI,SAAS,IAAI,IAAjB,EAAuB;AACnB;AACA;AACA;AACA;AACA;AACA,QAAA,CAAC,CAAC,cAAF;;AAEA,YAAM,KAAK,GAAG,KAAI,CAAC,WAAL,CAAiB,SAAjB,EAA4B,CAA5B,CAAd;;AACA,QAAA,KAAI,CAAC,cAAL,CAAoB,KAApB;AACH;;AAED,MAAA,KAAK,CAAC,UAAN,CAAiB,KAAI,CAAC,KAAL,CAAW,SAA5B,EAAuC,CAAvC;AACH,KA5BO;;AA8BA,IAAA,KAAA,CAAA,oBAAA,GAAuB,UAAC,CAAD,EAA4C;AACvE,UAAI,KAAI,CAAC,KAAL,CAAW,0BAAf,EAA2C;AACvC,QAAA,KAAI,CAAC,eAAL,CAAqB,oBAAoB,CAAC,CAAC,CAAC,IAAH,CAAzC;;AACA,QAAA,KAAI,CAAC,QAAL,CAAc;AAAE,UAAA,sBAAsB,EAAE;AAA1B,SAAd;AACH;AACJ,KALO;;AAOA,IAAA,KAAA,CAAA,uBAAA,GAA0B,UAAC,CAAD,EAA4C;AAC1E,UAAI,KAAI,CAAC,KAAL,CAAW,0BAAf,EAA2C;AAC/B,YAAA,IAAI,GAAK,CAAC,CAAN,IAAJ;AACR,YAAM,cAAc,GAAG,oBAAoB,CAAC,IAAD,CAA3C;;AACA,YAAI,cAAc,CAAC,MAAf,KAA0B,CAA1B,IAA+B,IAAI,CAAC,MAAL,GAAc,CAAjD,EAAoD;AAChD,UAAA,KAAI,CAAC,QAAL,CAAc;AAAE,YAAA,sBAAsB,EAAE;AAA1B,WAAd;AACH,SAFD,MAEO;AACH,UAAA,KAAI,CAAC,QAAL,CAAc;AAAE,YAAA,sBAAsB,EAAE;AAA1B,WAAd;AACH;AACJ;AACJ,KAVO;;AAYA,IAAA,KAAA,CAAA,mBAAA,GAAsB,UAAC,CAAD,EAAuB;AACjD;AACA;AACA,UAAI,KAAI,CAAC,KAAL,CAAW,0BAAX,IAAyC,CAAC,2BAA2B,CAAC,CAAD,CAAzE,EAA8E;AAC1E,QAAA,CAAC,CAAC,cAAF;AACH;;AAED,MAAA,KAAK,CAAC,UAAN,CAAiB,KAAI,CAAC,KAAL,CAAW,UAA5B,EAAwC,CAAxC;AACH,KARO;;AAUA,IAAA,KAAA,CAAA,gBAAA,GAAmB,UAAC,CAAD,EAAwB;AAC/C,MAAA,KAAI,CAAC,sBAAL,GAA8B,IAA9B;AACA,MAAA,KAAK,CAAC,UAAN,CAAiB,KAAI,CAAC,KAAL,CAAW,OAA5B,EAAqC,CAArC;AACH,KAHO;;AAKA,IAAA,KAAA,CAAA,iBAAA,GAAoB,UAAC,CAAD,EAAmB;AACnC,UAAA,KAAK,GAAK,CAAC,CAAC,MAAF,CAAL,KAAL;AAER,UAAI,SAAS,GAAG,KAAhB;;AACA,UAAI,KAAI,CAAC,KAAL,CAAW,0BAAX,IAAyC,KAAI,CAAC,sBAAlD,EAA0E;AACtE,QAAA,KAAI,CAAC,sBAAL,GAA8B,KAA9B;AACA,QAAA,SAAS,GAAG,oBAAoB,CAAC,KAAD,CAAhC;AACH;;AAED,MAAA,KAAI,CAAC,eAAL,CAAqB,SAArB;;AACA,MAAA,KAAI,CAAC,QAAL,CAAc;AAAE,QAAA,uBAAuB,EAAE;AAA3B,OAAd;AACH,KAXO;;;AAgEX;;mBAnZY,Y;;AAmBK,EAAA,YAAA,CAAA,wBAAA,GAAd,UAAuC,KAAvC,EAAkE,KAAlE,EAA2F;;;AACvF,QAAM,SAAS,GAAG;AACd,MAAA,WAAW,EAAE,KAAK,CAAC,GADL;AAEd,MAAA,WAAW,EAAE,KAAK,CAAC,GAFL;AAGd,MAAA,aAAa,EAAE,KAAK,CAAC;AAHP,KAAlB;AAMA,QAAM,YAAY,GAAG,KAAK,CAAC,GAAN,KAAc,KAAK,CAAC,WAAzC;AACA,QAAM,YAAY,GAAG,KAAK,CAAC,GAAN,KAAc,KAAK,CAAC,WAAzC;AACA,QAAM,eAAe,GAAG,YAAY,IAAI,YAAxC,CATuF,CAWvF;AACA;;AACA,QAAM,KAAK,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAG,KAAK,CAAC,KAAT,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAc,EAAA,CAAE,QAAF,EAAd,MAAwB,IAAxB,IAAwB,EAAA,KAAA,KAAA,CAAxB,GAAwB,EAAxB,GAA8B,KAAK,CAAC,KAA/C;AACA,QAAM,gBAAgB,GAAG,cAAY,CAAC,mBAAb,CAAiC,KAAjC,CAAzB;AAEA,QAAM,cAAc,GAChB,KAAK,KAAK,cAAY,CAAC,WAAvB,GACM,cAAY,CAAC,kBAAb,CAAgC,KAAhC,EAAuC,gBAAvC,EAAyD,KAAK,CAAC,GAA/D,EAAoE,KAAK,CAAC,GAA1E,CADN,GAEM,cAAY,CAAC,WAHvB,CAhBuF,CAqBvF;AACA;;AACA,QAAI,eAAe,IAAI,cAAc,KAAK,KAAK,CAAC,KAAhD,EAAuD;AACnD,aAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAY,SAAZ,CAAA,EAAqB;AAAE,QAAA,gBAAgB,EAAA,gBAAlB;AAAoB,QAAA,KAAK,EAAE;AAA3B,OAArB,CAAA;AACH;;AAED,WAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAY,SAAZ,CAAA,EAAqB;AAAE,MAAA,gBAAgB,EAAA,gBAAlB;AAAoB,MAAA,KAAK,EAAA;AAAzB,KAArB,CAAA;AACH,GA5Ba,CAnBlB,CAoDI;AACA;;;AACe,EAAA,YAAA,CAAA,mBAAA,GAAf,UAAmC,KAAnC,EAA6E;AACzE,QAAI,KAAK,CAAC,aAAN,IAAuB,IAA3B,EAAiC;AAC7B,aAAO,KAAK,CAAC,kBAAN,CAAyB,KAAK,CAAC,aAA/B,CAAP;AACH,KAFD,MAEO;AACH,aAAO,KAAK,CAAC,kBAAN,CAAyB,KAAK,CAAC,QAA/B,CAAP;AACH;AACJ,GANc;;AAQA,EAAA,YAAA,CAAA,kBAAA,GAAf,UAAkC,KAAlC,EAAiD,gBAAjD,EAA2E,GAA3E,EAAwF,GAAxF,EAAqG,KAArG,EAA8G;AAAT,QAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,KAAA,GAAA,CAAA;AAAS;;AAC1G,QAAI,CAAC,cAAc,CAAC,KAAD,CAAnB,EAA4B;AACxB,aAAO,cAAY,CAAC,WAApB;AACH;;AACD,QAAM,SAAS,GAAG,cAAc,CAAC,UAAU,CAAC,KAAD,CAAV,GAAoB,KAArB,EAA4B,gBAA5B,CAAhC;AACA,WAAO,UAAU,CAAC,SAAD,EAAY,GAAZ,EAAiB,GAAjB,CAAV,CAAgC,QAAhC,EAAP;AACH,GANc;;AAwBR,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;;;AACU,QAAA,EAAA,GAA6C,KAAK,KAAlD;AAAA,QAAE,cAAc,GAAA,EAAA,CAAA,cAAhB;AAAA,QAAkB,SAAS,GAAA,EAAA,CAAA,SAA3B;AAAA,QAA6B,IAAI,GAAA,EAAA,CAAA,IAAjC;AAAA,QAAmC,KAAK,GAAA,EAAA,CAAA,KAAxC;AACN,QAAM,gBAAgB,GAAG,UAAU,CAAC,OAAO,CAAC,aAAT,GAAsB,EAAA,GAAA,EAAA,EAAI,EAAA,CAAC,OAAO,CAAC,KAAT,CAAA,GAAiB,KAArB,EAA0B,EAAhD,GAAoD,SAApD,CAAnC;AACA,QAAM,OAAO,GAAG,KAAK,aAAL,EAAhB;AACA,WACI,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AAAC,MAAA,SAAS,EAAE,gBAAZ;AAA8B,MAAA,IAAI,EAAE;AAApC,KAAb,EACK,cAAc,KAAK,QAAQ,CAAC,IAA5B,IAAoC,OADzC,EAEK,KAAK,WAAL,EAFL,EAGK,cAAc,KAAK,QAAQ,CAAC,KAA5B,IAAqC,OAH1C,CADJ;AAOH,GAXM;;AAaA,EAAA,YAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,UAA0B,SAA1B,EAAyD,SAAzD,EAAsF;;;AAClF,IAAA,MAAA,CAAA,SAAA,CAAM,kBAAN,CAAwB,IAAxB,CAAwB,IAAxB,EAAyB,SAAzB,EAAoC,SAApC;;AAEA,QAAI,KAAK,KAAL,CAAW,uBAAf,EAAwC;AACpC,WAAK,YAAL,CAAkB,iBAAlB,CAAoC,CAApC,EAAuC,KAAK,KAAL,CAAW,KAAX,CAAiB,MAAxD;AACH;;AAED,QAAM,YAAY,GAAG,KAAK,KAAL,CAAW,GAAX,KAAmB,SAAS,CAAC,GAAlD;AACA,QAAM,YAAY,GAAG,KAAK,KAAL,CAAW,GAAX,KAAmB,SAAS,CAAC,GAAlD;AACA,QAAM,eAAe,GAAG,YAAY,IAAI,YAAxC;;AACA,QAAI,eAAe,IAAI,KAAK,KAAL,CAAW,KAAX,KAAqB,SAAS,CAAC,KAAtD,EAA6D;AACzD;AACA,OAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAK,KAAL,EAAW,aAAX,MAAwB,IAAxB,IAAwB,EAAA,KAAA,KAAA,CAAxB,GAAwB,KAAA,CAAxB,GAAwB,EAAA,CAAA,IAAA,CAAA,EAAA,EAAG,CAAC,KAAK,KAAL,CAAW,KAAf,EAAsB,KAAK,KAAL,CAAW,KAAjC,EAAwC,KAAK,YAA7C,CAAxB;AACH;AACJ,GAdM;;AAgBG,EAAA,YAAA,CAAA,SAAA,CAAA,aAAA,GAAV,UAAwB,SAAxB,EAAsE;AAC1D,QAAA,aAAa,GAA+C,SAAS,CAAxD,aAAb;AAAA,QAAe,GAAG,GAA0C,SAAS,CAAnD,GAAlB;AAAA,QAAoB,GAAG,GAAqC,SAAS,CAA9C,GAAvB;AAAA,QAAyB,aAAa,GAAsB,SAAS,CAA/B,aAAtC;AAAA,QAAwC,QAAQ,GAAY,SAAS,CAArB,QAAhD;AAAA,QAAkD,KAAK,GAAK,SAAS,CAAd,KAAvD;;AACR,QAAI,GAAG,IAAI,IAAP,IAAe,GAAG,IAAI,IAAtB,IAA8B,GAAG,GAAG,GAAxC,EAA6C;AACzC,YAAM,IAAI,KAAJ,CAAU,MAAM,CAAC,qBAAjB,CAAN;AACH;;AACD,QAAI,QAAQ,IAAI,IAAhB,EAAsB;AAClB,YAAM,IAAI,KAAJ,CAAU,MAAM,CAAC,4BAAjB,CAAN;AACH;;AACD,QAAI,QAAQ,IAAI,CAAhB,EAAmB;AACf,YAAM,IAAI,KAAJ,CAAU,MAAM,CAAC,oCAAjB,CAAN;AACH;;AACD,QAAI,aAAa,IAAI,aAAa,IAAI,CAAtC,EAAyC;AACrC,YAAM,IAAI,KAAJ,CAAU,MAAM,CAAC,0CAAjB,CAAN;AACH;;AACD,QAAI,aAAa,IAAI,aAAa,IAAI,CAAtC,EAAyC;AACrC,YAAM,IAAI,KAAJ,CAAU,MAAM,CAAC,0CAAjB,CAAN;AACH;;AACD,QAAI,aAAa,IAAI,aAAa,GAAG,QAArC,EAA+C;AAC3C,YAAM,IAAI,KAAJ,CAAU,MAAM,CAAC,mCAAjB,CAAN;AACH;;AACD,QAAI,aAAa,IAAI,aAAa,GAAG,QAArC,EAA+C;AAC3C,YAAM,IAAI,KAAJ,CAAU,MAAM,CAAC,mCAAjB,CAAN;AACH,KAtBiE,CAwBlE;;;AACA,QAAI,KAAK,IAAI,IAAb,EAAmB;AACf,UAAM,gBAAgB,GAAG,cAAY,CAAC,mBAAb,CAAiC,SAAjC,CAAzB;AACA,UAAM,cAAc,GAAG,cAAY,CAAC,kBAAb,CAAgC,KAAK,CAAC,QAAN,EAAhC,EAAkD,gBAAlD,EAAoE,GAApE,EAAyE,GAAzE,CAAvB;;AACA,UAAI,cAAc,KAAK,KAAK,CAAC,QAAN,EAAvB,EAAyC;AACrC,QAAA,OAAO,CAAC,IAAR,CAAa,MAAM,CAAC,sCAApB;AACH;AACJ;AACJ,GAhCS,CAnHd,CAqJI;AACA;;;AAEQ,EAAA,YAAA,CAAA,SAAA,CAAA,aAAA,GAAR,YAAA;AACU,QAAA,EAAA,GAAuB,KAAK,KAA5B;AAAA,QAAE,MAAM,GAAA,EAAA,CAAA,MAAR;AAAA,QAAU,GAAG,GAAA,EAAA,CAAA,GAAb;AAAA,QAAe,GAAG,GAAA,EAAA,CAAA,GAAlB;AACE,QAAA,KAAK,GAAK,KAAK,KAAL,CAAL,KAAL;AACR,QAAM,QAAQ,GAAG,KAAK,KAAL,CAAW,QAAX,IAAuB,KAAK,KAAL,CAAW,QAAnD;AACA,WACI,KAAA,CAAA,aAAA,CAAC,WAAD,EAAY;AAAC,MAAA,SAAS,EAAE,OAAO,CAAC,KAApB;AAA2B,MAAA,GAAG,EAAC,cAA/B;AAA8C,MAAA,QAAQ,EAAE;AAAxD,KAAZ,EACI,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,QAAA,CAAA;AACT,MAAA,QAAQ,EAAE,QAAQ,IAAK,KAAK,KAAK,EAAV,IAAgB,CAAC,KAAD,IAAU,GADxC;AAET,MAAA,IAAI,EAAC,YAFI;AAGT,MAAA,MAAM,EAAE;AAHC,KAAA,EAIL,KAAK,uBAJA,CAAb,CADJ,EAOI,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,QAAA,CAAA;AACT,MAAA,QAAQ,EAAE,QAAQ,IAAK,KAAK,KAAK,EAAV,IAAgB,CAAC,KAAD,IAAU,GADxC;AAET,MAAA,IAAI,EAAC,cAFI;AAGT,MAAA,MAAM,EAAE;AAHC,KAAA,EAIL,KAAK,uBAJA,CAAb,CAPJ,CADJ;AAgBH,GApBO;;AAsBA,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAR,YAAA;AACI,QAAM,mBAAmB,GAAG,kBAAkB,CAAC,KAAK,KAAN,EAAa,cAAb,EAA6B,IAA7B,CAA9C;AACA,WACI,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW,QAAA,CAAA;AACP,MAAA,YAAY,EAAC;AADN,KAAA,EAEH,mBAFG,EAEgB;AACvB,MAAA,MAAM,EAAE,KAAK,KAAL,CAAW,sBAAX,GAAoC,MAAM,CAAC,MAA3C,GAAoD,KAAK,KAAL,CAAW,MADhD;AAEvB,MAAA,QAAQ,EAAE,KAAK,QAFQ;AAGvB,MAAA,KAAK,EAAE,KAAK,KAAL,CAAW,KAHK;AAIvB,MAAA,QAAQ,EAAE,KAAK,KAAL,CAAW,QAJE;AAKvB,MAAA,OAAO,EAAE,KAAK,gBALS;AAMvB,MAAA,MAAM,EAAE,KAAK,eANU;AAOvB,MAAA,QAAQ,EAAE,KAAK,iBAPQ;AAQvB,MAAA,gBAAgB,EAAE,KAAK,oBARA;AASvB,MAAA,mBAAmB,EAAE,KAAK,uBATH;AAUvB,MAAA,SAAS,EAAE,KAAK,kBAVO;AAWvB,MAAA,UAAU,EAAE,KAAK,mBAXM;AAYvB,MAAA,OAAO,EAAE,KAAK,gBAZS;AAavB,MAAA,YAAY,EAAE,KAAK,KAAL,CAAW,YAbF;AAcvB,MAAA,KAAK,EAAE,KAAK,KAAL,CAAW;AAdK,KAFhB,CAAX,CADJ;AAoBH,GAtBO,CA9KZ,CA2MI;AACA;;;AAEQ,EAAA,YAAA,CAAA,SAAA,CAAA,sBAAA,GAAR,UAA+B,SAA/B,EAA4D;AAA5D,QAAA,KAAA,GAAA,IAAA;;AACI,WAAO;AACH;AACA,MAAA,SAAS,EAAE,UAAA,GAAA,EAAG;AACV,YAAI,CAAC,KAAI,CAAC,KAAL,CAAW,QAAZ,IAAwB,IAAI,CAAC,eAAL,CAAqB,GAAG,CAAC,OAAzB,CAA5B,EAA+D;AAC3D,UAAA,KAAI,CAAC,iBAAL,CAAuB,GAAvB,EAA4B,SAA5B;AACH;AACJ,OANE;AAOH,MAAA,WAAW,EAAE,UAAA,GAAA,EAAG;AACZ,YAAI,CAAC,KAAI,CAAC,KAAL,CAAW,QAAhB,EAA0B;AACtB,UAAA,KAAI,CAAC,iBAAL,CAAuB,GAAvB,EAA4B,SAA5B;;AACA,UAAA,KAAI,CAAC,qBAAL;AACH;AACJ;AAZE,KAAP;AAcH,GAfO;;AAuBA,EAAA,YAAA,CAAA,SAAA,CAAA,qBAAA,GAAR,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA,CAAA,CACI;AACA;AACA;;;AACA,IAAA,QAAQ,CAAC,gBAAT,CAA0B,SAA1B,EAAqC,KAAK,oBAA1C,EAJJ,CAMI;AACA;;AACA,SAAK,UAAL,CAAgB,YAAA;AACZ,MAAA,KAAI,CAAC,UAAL,GAAkB,MAAM,CAAC,WAAP,CAAmB,KAAI,CAAC,sBAAxB,EAAgD,cAAY,CAAC,0BAA7D,CAAlB;AACH,KAFD,EAEG,cAAY,CAAC,uBAFhB;AAGH,GAXO,CArOZ,CAgWI;AACA;;;AAEQ,EAAA,YAAA,CAAA,SAAA,CAAA,eAAA,GAAR,UAAwB,aAAxB,EAA6C;;;AACzC,QAAI,KAAK,KAAL,CAAW,KAAX,IAAoB,IAAxB,EAA8B;AAC1B,WAAK,QAAL,CAAc;AAAE,QAAA,KAAK,EAAE;AAAT,OAAd;AACH;;AAED,KAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAK,KAAL,EAAW,aAAX,MAAwB,IAAxB,IAAwB,EAAA,KAAA,KAAA,CAAxB,GAAwB,KAAA,CAAxB,GAAwB,EAAA,CAAA,IAAA,CAAA,EAAA,EAAG,CAAC,aAAJ,EAAmB,aAAnB,EAAkC,KAAK,YAAvC,CAAxB;AACH,GANO;;AAQA,EAAA,YAAA,CAAA,SAAA,CAAA,cAAA,GAAR,UAAuB,KAAvB,EAAoC;AAChC;AACA,QAAM,SAAS,GAAG,KAAK,KAAL,CAAW,KAAX,KAAqB,cAAY,CAAC,WAAlC,GAAgD,cAAY,CAAC,UAA7D,GAA0E,KAAK,KAAL,CAAW,KAAvG;AACA,QAAM,SAAS,GAAG,KAAK,kBAAL,CAAwB,SAAxB,EAAmC,KAAnC,CAAlB;;AAEA,QAAI,SAAS,KAAK,KAAK,KAAL,CAAW,KAA7B,EAAoC;AAChC,WAAK,eAAL,CAAqB,SAArB;AACA,WAAK,QAAL,CAAc;AAAE,QAAA,uBAAuB,EAAE,KAAK,KAAL,CAAW;AAAtC,OAAd;AACH,KAR+B,CAUhC;;;AACA,WAAO,SAAP;AACH,GAZO;;AAcA,EAAA,YAAA,CAAA,SAAA,CAAA,iBAAA,GAAR,UAA0B,SAA1B,EAAyD,iBAAzD,EAAqF,eAArF,EAA6G;AACnG,QAAA,EAAA,GAA6C,KAAK,KAAlD;AAAA,QAAE,aAAa,GAAA,EAAA,CAAA,aAAf;AAAA,QAAiB,aAAa,GAAA,EAAA,CAAA,aAA9B;AAAA,QAAgC,QAAQ,GAAA,EAAA,CAAA,QAAxC;;AAEN,QAAI,iBAAiB,IAAI,aAAa,IAAI,IAA1C,EAAgD;AAC5C,aAAO,SAAS,GAAG,aAAnB;AACH,KAFD,MAEO,IAAI,eAAe,IAAI,aAAa,IAAI,IAAxC,EAA8C;AACjD,aAAO,SAAS,GAAG,aAAnB;AACH,KAFM,MAEA;AACH,aAAO,SAAS,GAAG,QAAnB;AACH;AACJ,GAVO;;AAYA,EAAA,YAAA,CAAA,SAAA,CAAA,kBAAA,GAAR,UAA2B,KAA3B,EAA0C,KAA1C,EAAmD;AAAT,QAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,KAAA,GAAA,CAAA;AAAS;;AAC/C,WAAO,cAAY,CAAC,kBAAb,CACH,KADG,EAEH,KAAK,KAAL,CAAW,gBAFR,EAGH,KAAK,KAAL,CAAW,GAHR,EAIH,KAAK,KAAL,CAAW,GAJR,EAKH,KALG,CAAP;AAOH,GARO;;AAUA,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,SAApB,EAAmD,CAAnD,EAA4F;AACxF,SAAK,KAAL,GAAa,KAAK,iBAAL,CAAuB,SAAvB,EAAkC,CAAC,CAAC,QAApC,EAA8C,CAAC,CAAC,MAAhD,CAAb;AACA,WAAO,KAAK,KAAZ;AACH,GAHO;;;AA9YM,EAAA,YAAA,CAAA,WAAA,GAAiB,kBAAkB,GAAA,eAAnC;AAEA,EAAA,YAAA,CAAA,WAAA,GAAc,EAAd;AACA,EAAA,YAAA,CAAA,UAAA,GAAa,GAAb;AAEA,EAAA,YAAA,CAAA,YAAA,GAAmC;AAC7C,IAAA,0BAA0B,EAAE,IADiB;AAE7C,IAAA,cAAc,EAAE,QAAQ,CAAC,KAFoB;AAG7C,IAAA,gBAAgB,EAAE,KAH2B;AAI7C,IAAA,YAAY,EAAE,cAAY,CAAC,WAJkB;AAK7C,IAAA,KAAK,EAAE,KALsC;AAM7C,IAAA,aAAa,EAAE,EAN8B;AAO7C,IAAA,aAAa,EAAE,GAP8B;AAQ7C,IAAA,gBAAgB,EAAE,KAR2B;AAS7C,IAAA,oBAAoB,EAAE,KATuB;AAU7C,IAAA,QAAQ,EAAE;AAVmC,GAAnC;AA2CC,EAAA,YAAA,CAAA,uBAAA,GAA0B,GAA1B;AACA,EAAA,YAAA,CAAA,0BAAA,GAA6B,GAA7B;AAlDN,EAAA,YAAY,GAAA,cAAA,GAAA,UAAA,CAAA,CADxB,QACwB,CAAA,EAAZ,YAAY,CAAZ;AAmZb,SAAA,YAAA;AAAC,CAnZD,CAAkC,sBAAlC,CAAA;;SAAa,Y","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __decorate, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { AbstractPureComponent2, Classes, DISPLAYNAME_PREFIX, Intent, Keys, Position, removeNonHTMLProps, Utils, } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { ButtonGroup } from \"../button/buttonGroup\";\nimport { AnchorButton } from \"../button/buttons\";\nimport { ControlGroup } from \"./controlGroup\";\nimport { InputGroup } from \"./inputGroup\";\nimport { clampValue, getValueOrEmptyValue, isValidNumericKeyboardEvent, isValueNumeric, sanitizeNumericInput, toMaxPrecision, } from \"./numericInputUtils\";\nvar IncrementDirection;\n(function (IncrementDirection) {\n    IncrementDirection[IncrementDirection[\"DOWN\"] = -1] = \"DOWN\";\n    IncrementDirection[IncrementDirection[\"UP\"] = 1] = \"UP\";\n})(IncrementDirection || (IncrementDirection = {}));\nvar NON_HTML_PROPS = [\n    \"allowNumericCharactersOnly\",\n    \"buttonPosition\",\n    \"clampValueOnBlur\",\n    \"className\",\n    \"defaultValue\",\n    \"majorStepSize\",\n    \"minorStepSize\",\n    \"onButtonClick\",\n    \"onValueChange\",\n    \"selectAllOnFocus\",\n    \"selectAllOnIncrement\",\n    \"stepSize\",\n];\nvar NumericInput = /** @class */ (function (_super) {\n    __extends(NumericInput, _super);\n    function NumericInput() {\n        var _a;\n        var _this = _super.apply(this, arguments) || this;\n        _this.state = {\n            currentImeInputInvalid: false,\n            shouldSelectAfterUpdate: false,\n            stepMaxPrecision: NumericInput_1.getStepMaxPrecision(_this.props),\n            value: getValueOrEmptyValue((_a = _this.props.value) !== null && _a !== void 0 ? _a : _this.props.defaultValue),\n        };\n        // updating these flags need not trigger re-renders, so don't include them in this.state.\n        _this.didPasteEventJustOccur = false;\n        _this.delta = 0;\n        _this.inputElement = null;\n        _this.intervalId = null;\n        _this.incrementButtonHandlers = _this.getButtonEventHandlers(IncrementDirection.UP);\n        _this.decrementButtonHandlers = _this.getButtonEventHandlers(IncrementDirection.DOWN);\n        _this.inputRef = function (input) {\n            _this.inputElement = input;\n            Utils.safeInvoke(_this.props.inputRef, input);\n        };\n        _this.handleButtonClick = function (e, direction) {\n            var _a, _b;\n            var delta = _this.updateDelta(direction, e);\n            var nextValue = _this.incrementValue(delta);\n            (_b = (_a = _this.props).onButtonClick) === null || _b === void 0 ? void 0 : _b.call(_a, +nextValue, nextValue);\n        };\n        _this.stopContinuousChange = function () {\n            _this.delta = 0;\n            _this.clearTimeouts();\n            clearInterval(_this.intervalId);\n            document.removeEventListener(\"mouseup\", _this.stopContinuousChange);\n        };\n        _this.handleContinuousChange = function () {\n            var _a, _b;\n            var nextValue = _this.incrementValue(_this.delta);\n            (_b = (_a = _this.props).onButtonClick) === null || _b === void 0 ? void 0 : _b.call(_a, +nextValue, nextValue);\n        };\n        // Callbacks - Input\n        // =================\n        _this.handleInputFocus = function (e) {\n            // update this state flag to trigger update for input selection (see componentDidUpdate)\n            _this.setState({ shouldSelectAfterUpdate: _this.props.selectAllOnFocus });\n            Utils.safeInvoke(_this.props.onFocus, e);\n        };\n        _this.handleInputBlur = function (e) {\n            // always disable this flag on blur so it's ready for next time.\n            _this.setState({ shouldSelectAfterUpdate: false });\n            if (_this.props.clampValueOnBlur) {\n                var value = e.target.value;\n                _this.handleNextValue(_this.roundAndClampValue(value));\n            }\n            Utils.safeInvoke(_this.props.onBlur, e);\n        };\n        _this.handleInputKeyDown = function (e) {\n            if (_this.props.disabled || _this.props.readOnly) {\n                return;\n            }\n            var keyCode = e.keyCode;\n            var direction;\n            if (keyCode === Keys.ARROW_UP) {\n                direction = IncrementDirection.UP;\n            }\n            else if (keyCode === Keys.ARROW_DOWN) {\n                direction = IncrementDirection.DOWN;\n            }\n            if (direction != null) {\n                // when the input field has focus, some key combinations will modify\n                // the field's selection range. we'll actually want to select all\n                // text in the field after we modify the value on the following\n                // lines. preventing the default selection behavior lets us do that\n                // without interference.\n                e.preventDefault();\n                var delta = _this.updateDelta(direction, e);\n                _this.incrementValue(delta);\n            }\n            Utils.safeInvoke(_this.props.onKeyDown, e);\n        };\n        _this.handleCompositionEnd = function (e) {\n            if (_this.props.allowNumericCharactersOnly) {\n                _this.handleNextValue(sanitizeNumericInput(e.data));\n                _this.setState({ currentImeInputInvalid: false });\n            }\n        };\n        _this.handleCompositionUpdate = function (e) {\n            if (_this.props.allowNumericCharactersOnly) {\n                var data = e.data;\n                var sanitizedValue = sanitizeNumericInput(data);\n                if (sanitizedValue.length === 0 && data.length > 0) {\n                    _this.setState({ currentImeInputInvalid: true });\n                }\n                else {\n                    _this.setState({ currentImeInputInvalid: false });\n                }\n            }\n        };\n        _this.handleInputKeyPress = function (e) {\n            // we prohibit keystrokes in onKeyPress instead of onKeyDown, because\n            // e.key is not trustworthy in onKeyDown in all browsers.\n            if (_this.props.allowNumericCharactersOnly && !isValidNumericKeyboardEvent(e)) {\n                e.preventDefault();\n            }\n            Utils.safeInvoke(_this.props.onKeyPress, e);\n        };\n        _this.handleInputPaste = function (e) {\n            _this.didPasteEventJustOccur = true;\n            Utils.safeInvoke(_this.props.onPaste, e);\n        };\n        _this.handleInputChange = function (e) {\n            var value = e.target.value;\n            var nextValue = value;\n            if (_this.props.allowNumericCharactersOnly && _this.didPasteEventJustOccur) {\n                _this.didPasteEventJustOccur = false;\n                nextValue = sanitizeNumericInput(value);\n            }\n            _this.handleNextValue(nextValue);\n            _this.setState({ shouldSelectAfterUpdate: false });\n        };\n        return _this;\n    }\n    NumericInput_1 = NumericInput;\n    NumericInput.getDerivedStateFromProps = function (props, state) {\n        var _a, _b;\n        var nextState = {\n            prevMaxProp: props.max,\n            prevMinProp: props.min,\n            prevValueProp: props.value,\n        };\n        var didMinChange = props.min !== state.prevMinProp;\n        var didMaxChange = props.max !== state.prevMaxProp;\n        var didBoundsChange = didMinChange || didMaxChange;\n        // in controlled mode, use props.value\n        // in uncontrolled mode, if state.value has not been assigned yet (upon initial mount), use props.defaultValue\n        var value = (_b = (_a = props.value) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : state.value;\n        var stepMaxPrecision = NumericInput_1.getStepMaxPrecision(props);\n        var sanitizedValue = value !== NumericInput_1.VALUE_EMPTY\n            ? NumericInput_1.roundAndClampValue(value, stepMaxPrecision, props.min, props.max)\n            : NumericInput_1.VALUE_EMPTY;\n        // if a new min and max were provided that cause the existing value to fall\n        // outside of the new bounds, then clamp the value to the new valid range.\n        if (didBoundsChange && sanitizedValue !== state.value) {\n            return __assign(__assign({}, nextState), { stepMaxPrecision: stepMaxPrecision, value: sanitizedValue });\n        }\n        return __assign(__assign({}, nextState), { stepMaxPrecision: stepMaxPrecision, value: value });\n    };\n    // Value Helpers\n    // =============\n    NumericInput.getStepMaxPrecision = function (props) {\n        if (props.minorStepSize != null) {\n            return Utils.countDecimalPlaces(props.minorStepSize);\n        }\n        else {\n            return Utils.countDecimalPlaces(props.stepSize);\n        }\n    };\n    NumericInput.roundAndClampValue = function (value, stepMaxPrecision, min, max, delta) {\n        if (delta === void 0) { delta = 0; }\n        if (!isValueNumeric(value)) {\n            return NumericInput_1.VALUE_EMPTY;\n        }\n        var nextValue = toMaxPrecision(parseFloat(value) + delta, stepMaxPrecision);\n        return clampValue(nextValue, min, max).toString();\n    };\n    NumericInput.prototype.render = function () {\n        var _a;\n        var _b = this.props, buttonPosition = _b.buttonPosition, className = _b.className, fill = _b.fill, large = _b.large;\n        var containerClasses = classNames(Classes.NUMERIC_INPUT, (_a = {}, _a[Classes.LARGE] = large, _a), className);\n        var buttons = this.renderButtons();\n        return (React.createElement(ControlGroup, { className: containerClasses, fill: fill },\n            buttonPosition === Position.LEFT && buttons,\n            this.renderInput(),\n            buttonPosition === Position.RIGHT && buttons));\n    };\n    NumericInput.prototype.componentDidUpdate = function (prevProps, prevState) {\n        var _a, _b;\n        _super.prototype.componentDidUpdate.call(this, prevProps, prevState);\n        if (this.state.shouldSelectAfterUpdate) {\n            this.inputElement.setSelectionRange(0, this.state.value.length);\n        }\n        var didMinChange = this.props.min !== prevProps.min;\n        var didMaxChange = this.props.max !== prevProps.max;\n        var didBoundsChange = didMinChange || didMaxChange;\n        if (didBoundsChange && this.state.value !== prevState.value) {\n            // we clamped the value due to a bounds change, so we should fire the change callback\n            (_b = (_a = this.props).onValueChange) === null || _b === void 0 ? void 0 : _b.call(_a, +this.state.value, this.state.value, this.inputElement);\n        }\n    };\n    NumericInput.prototype.validateProps = function (nextProps) {\n        var majorStepSize = nextProps.majorStepSize, max = nextProps.max, min = nextProps.min, minorStepSize = nextProps.minorStepSize, stepSize = nextProps.stepSize, value = nextProps.value;\n        if (min != null && max != null && min > max) {\n            throw new Error(Errors.NUMERIC_INPUT_MIN_MAX);\n        }\n        if (stepSize == null) {\n            throw new Error(Errors.NUMERIC_INPUT_STEP_SIZE_NULL);\n        }\n        if (stepSize <= 0) {\n            throw new Error(Errors.NUMERIC_INPUT_STEP_SIZE_NON_POSITIVE);\n        }\n        if (minorStepSize && minorStepSize <= 0) {\n            throw new Error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_NON_POSITIVE);\n        }\n        if (majorStepSize && majorStepSize <= 0) {\n            throw new Error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_NON_POSITIVE);\n        }\n        if (minorStepSize && minorStepSize > stepSize) {\n            throw new Error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_BOUND);\n        }\n        if (majorStepSize && majorStepSize < stepSize) {\n            throw new Error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_BOUND);\n        }\n        // controlled mode\n        if (value != null) {\n            var stepMaxPrecision = NumericInput_1.getStepMaxPrecision(nextProps);\n            var sanitizedValue = NumericInput_1.roundAndClampValue(value.toString(), stepMaxPrecision, min, max);\n            if (sanitizedValue !== value.toString()) {\n                console.warn(Errors.NUMERIC_INPUT_CONTROLLED_VALUE_INVALID);\n            }\n        }\n    };\n    // Render Helpers\n    // ==============\n    NumericInput.prototype.renderButtons = function () {\n        var _a = this.props, intent = _a.intent, max = _a.max, min = _a.min;\n        var value = this.state.value;\n        var disabled = this.props.disabled || this.props.readOnly;\n        return (React.createElement(ButtonGroup, { className: Classes.FIXED, key: \"button-group\", vertical: true },\n            React.createElement(AnchorButton, __assign({ disabled: disabled || (value !== \"\" && +value >= max), icon: \"chevron-up\", intent: intent }, this.incrementButtonHandlers)),\n            React.createElement(AnchorButton, __assign({ disabled: disabled || (value !== \"\" && +value <= min), icon: \"chevron-down\", intent: intent }, this.decrementButtonHandlers))));\n    };\n    NumericInput.prototype.renderInput = function () {\n        var inputGroupHtmlProps = removeNonHTMLProps(this.props, NON_HTML_PROPS, true);\n        return (React.createElement(InputGroup, __assign({ autoComplete: \"off\" }, inputGroupHtmlProps, { intent: this.state.currentImeInputInvalid ? Intent.DANGER : this.props.intent, inputRef: this.inputRef, large: this.props.large, leftIcon: this.props.leftIcon, onFocus: this.handleInputFocus, onBlur: this.handleInputBlur, onChange: this.handleInputChange, onCompositionEnd: this.handleCompositionEnd, onCompositionUpdate: this.handleCompositionUpdate, onKeyDown: this.handleInputKeyDown, onKeyPress: this.handleInputKeyPress, onPaste: this.handleInputPaste, rightElement: this.props.rightElement, value: this.state.value })));\n    };\n    // Callbacks - Buttons\n    // ===================\n    NumericInput.prototype.getButtonEventHandlers = function (direction) {\n        var _this = this;\n        return {\n            // keydown is fired repeatedly when held so it's implicitly continuous\n            onKeyDown: function (evt) {\n                if (!_this.props.disabled && Keys.isKeyboardClick(evt.keyCode)) {\n                    _this.handleButtonClick(evt, direction);\n                }\n            },\n            onMouseDown: function (evt) {\n                if (!_this.props.disabled) {\n                    _this.handleButtonClick(evt, direction);\n                    _this.startContinuousChange();\n                }\n            },\n        };\n    };\n    NumericInput.prototype.startContinuousChange = function () {\n        var _this = this;\n        // The button's onMouseUp event handler doesn't fire if the user\n        // releases outside of the button, so we need to watch all the way\n        // from the top.\n        document.addEventListener(\"mouseup\", this.stopContinuousChange);\n        // Initial delay is slightly longer to prevent the user from\n        // accidentally triggering the continuous increment/decrement.\n        this.setTimeout(function () {\n            _this.intervalId = window.setInterval(_this.handleContinuousChange, NumericInput_1.CONTINUOUS_CHANGE_INTERVAL);\n        }, NumericInput_1.CONTINUOUS_CHANGE_DELAY);\n    };\n    // Data logic\n    // ==========\n    NumericInput.prototype.handleNextValue = function (valueAsString) {\n        var _a, _b;\n        if (this.props.value == null) {\n            this.setState({ value: valueAsString });\n        }\n        (_b = (_a = this.props).onValueChange) === null || _b === void 0 ? void 0 : _b.call(_a, +valueAsString, valueAsString, this.inputElement);\n    };\n    NumericInput.prototype.incrementValue = function (delta) {\n        // pretend we're incrementing from 0 if currValue is empty\n        var currValue = this.state.value === NumericInput_1.VALUE_EMPTY ? NumericInput_1.VALUE_ZERO : this.state.value;\n        var nextValue = this.roundAndClampValue(currValue, delta);\n        if (nextValue !== this.state.value) {\n            this.handleNextValue(nextValue);\n            this.setState({ shouldSelectAfterUpdate: this.props.selectAllOnIncrement });\n        }\n        // return value used in continuous change updates\n        return nextValue;\n    };\n    NumericInput.prototype.getIncrementDelta = function (direction, isShiftKeyPressed, isAltKeyPressed) {\n        var _a = this.props, majorStepSize = _a.majorStepSize, minorStepSize = _a.minorStepSize, stepSize = _a.stepSize;\n        if (isShiftKeyPressed && majorStepSize != null) {\n            return direction * majorStepSize;\n        }\n        else if (isAltKeyPressed && minorStepSize != null) {\n            return direction * minorStepSize;\n        }\n        else {\n            return direction * stepSize;\n        }\n    };\n    NumericInput.prototype.roundAndClampValue = function (value, delta) {\n        if (delta === void 0) { delta = 0; }\n        return NumericInput_1.roundAndClampValue(value, this.state.stepMaxPrecision, this.props.min, this.props.max, delta);\n    };\n    NumericInput.prototype.updateDelta = function (direction, e) {\n        this.delta = this.getIncrementDelta(direction, e.shiftKey, e.altKey);\n        return this.delta;\n    };\n    var NumericInput_1;\n    NumericInput.displayName = DISPLAYNAME_PREFIX + \".NumericInput\";\n    NumericInput.VALUE_EMPTY = \"\";\n    NumericInput.VALUE_ZERO = \"0\";\n    NumericInput.defaultProps = {\n        allowNumericCharactersOnly: true,\n        buttonPosition: Position.RIGHT,\n        clampValueOnBlur: false,\n        defaultValue: NumericInput_1.VALUE_EMPTY,\n        large: false,\n        majorStepSize: 10,\n        minorStepSize: 0.1,\n        selectAllOnFocus: false,\n        selectAllOnIncrement: false,\n        stepSize: 1,\n    };\n    NumericInput.CONTINUOUS_CHANGE_DELAY = 300;\n    NumericInput.CONTINUOUS_CHANGE_INTERVAL = 100;\n    NumericInput = NumericInput_1 = __decorate([\n        polyfill\n    ], NumericInput);\n    return NumericInput;\n}(AbstractPureComponent2));\nexport { NumericInput };\n//# sourceMappingURL=numericInput.js.map"]},"metadata":{},"sourceType":"module"}